cmake_minimum_required(VERSION 2.8 FATAL_ERROR)

if(NOT WIN32)
    string(ASCII 27 Esc)
    set(ColourReset "${Esc}[m")
    set(ColourBold  "${Esc}[1m")
    set(Red         "${Esc}[31m")
    set(Green       "${Esc}[32m")
    set(Yellow      "${Esc}[33m")
    set(Blue        "${Esc}[34m")
    set(Magenta     "${Esc}[35m")
    set(Cyan        "${Esc}[36m")
    set(White       "${Esc}[37m")
    set(BoldRed     "${Esc}[1;31m")
    set(BoldGreen   "${Esc}[1;32m")
    set(BoldYellow  "${Esc}[1;33m")
    set(BoldBlue    "${Esc}[1;34m")
    set(BoldMagenta "${Esc}[1;35m")
    set(BoldCyan    "${Esc}[1;36m")
    set(BoldWhite   "${Esc}[1;37m")
endif()

function(add_modules)
    foreach(module ${META_MODULE_LIST})
        message(STATUS "${Green}${module} begin make ${BUILD_TARGET} PLATFORM_TYPE=${PLATFORM_TYPE} ${ColourReset}")
        execute_process(COMMAND make ${BUILD_TARGET} PLATFORM_TYPE=${PLATFORM_TYPE}
                WORKING_DIRECTORY ${module}
                RESULT_VARIABLE RET_VAL)
        if(NOT ${RET_VAL} EQUAL 0)
            message(FATAL_ERROR "${Red}${module} make ${BUILD_TARGET} PLATFORM_TYPE=${PLATFORM_TYPE} Error ${ColourReset}")
        endif()
        message(STATUS "${Green}${module} end make ${BUILD_TARGET} PLATFORM_TYPE=${PLATFORM_TYPE} ${ColourReset}")
    endforeach()
endfunction()

function(build_exe)
    if(NOT ${BUILD_TARGET} STREQUAL clean)
        include_directories(${META_INCLUDE_PATH})
        link_directories(${META_LIB_PATH})
        add_executable(${META_PROJECT_NAME} ${META_SRC_LISTS})
        target_link_libraries(${META_PROJECT_NAME} ${META_DEP_LISTS})
    endif()
endfunction()

function(build_library)
    if(NOT ${BUILD_TARGET} STREQUAL clean)
        include_directories(${META_INCLUDE_PATH})
        link_directories(${META_LIB_PATH})
        add_library(${META_PROJECT_NAME} ${META_LIB_TYPE} ${META_SRC_LISTS})
        target_link_libraries(${META_PROJECT_NAME} ${META_DEP_LISTS})
    endif()
endfunction()

# function(build_test)
#     foreach(PATH_NAME ${TEST_SRC_LISTS})
#         get_filename_component(FILE_NAME ${PATH_NAME} NAME_WE)
#         include_directories(${TEST_INCLUDE_PATH})
#         link_directories(${TEST_LIB_PATH})
#         add_executable(${FILE_NAME} ${PATH_NAME})
#         target_link_libraries(${FILE_NAME} ${TEST_DEP_LISTS})
#     endforeach()
# endfunction()

include(${CMAKE_CURRENT_SOURCE_DIR}/ProjectMetadata.cmake)
